---
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run unit tests
        run: ./test.sh unit

      - name: Run extended unit tests
        run: go test -v -timeout=30s ./tests/... -run="TestConfig|TestMock|TestWeaviateClient"

      - name: Run integration tests (mock only)
        run: go test -v -timeout=10s ./tests/... -run="TestMock"

      - name: Run integration tests (with Weaviate if configured)
        env:
          WEAVIATE_URL: ${{ secrets.WEAVIATE_URL }}
          WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}
          WEAVIATE_COLLECTION_TEST: ${{ secrets.WEAVIATE_COLLECTION_TEST }}
        run: |
          if [ -n "$WEAVIATE_URL" ] && [ -n "$WEAVIATE_API_KEY" ]; then
            echo "Running Weaviate integration tests..."
            echo "WEAVIATE_URL: $WEAVIATE_URL"
            go test -v -timeout=30s ./tests/... -run="TestWeaviate"
          else
            echo "Skipping Weaviate integration tests - no credentials provided"
          fi

      - name: Run coverage tests
        run: |
          # Unset Weaviate environment variables for coverage tests to avoid integration test failures
          unset WEAVIATE_URL
          unset WEAVIATE_API_KEY
          unset WEAVIATE_COLLECTION_TEST
          ./test.sh coverage

  fast-integration:
    name: Fast Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run fast integration tests
        run: |
          echo "Running fast integration tests..."
          go test -v -timeout=15s ./tests/... \
            -run="TestMock|TestConfig|TestWeaviateClient" -short
          echo "Fast integration tests completed"

  integration:
    name: Full Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run full integration tests
        env:
          WEAVIATE_URL: ${{ secrets.WEAVIATE_URL }}
          WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}
          WEAVIATE_COLLECTION_TEST: ${{ secrets.WEAVIATE_COLLECTION_TEST }}
        run: |
          echo "Running full integration tests..."
          ./test.sh integration
          echo "Full integration tests completed"

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install linting tools
        run: |
          chmod +x ./setup.sh
          ./setup.sh

      - name: Run linter
        run: ./lint.sh

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build
        run: ./build.sh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: weave-${{ matrix.os }}
          path: bin/

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install security tools
        run: |
          chmod +x ./setup.sh
          ./setup.sh

      - name: Run Go Security Checks
        run: |
          echo "Running comprehensive security checks..."
          govulncheck ./src/...
          echo "Vulnerability checks completed"

          # Run gosec if available (optional)
          if command -v gosec >/dev/null 2>&1; then
            echo "Running additional security checks with gosec..."
            gosec ./src/...
          else
            echo "gosec not available, skipping additional security checks"
          fi
          echo "Security checks completed"
