---
name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.2.4)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build for multiple platforms
        run: |
          # Create build directory
          mkdir -p dist

          # Get version information from git tag
          VERSION=${GITHUB_REF#refs/tags/v}
          GIT_COMMIT=$(git rev-parse HEAD)
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Build flags for version information
          VERSION_PKG="github.com/maximilien/weave-cli/src/pkg/version"
          LDFLAGS="-X $VERSION_PKG.Version=$VERSION"
          LDFLAGS="$LDFLAGS -X $VERSION_PKG.GitCommit=$GIT_COMMIT"
          LDFLAGS="$LDFLAGS -X $VERSION_PKG.BuildTime=$BUILD_TIME"

          # Build for different platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" \
            -o dist/weave-linux-amd64 ./src/main.go
          GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" \
            -o dist/weave-linux-arm64 ./src/main.go
          GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" \
            -o dist/weave-darwin-amd64 ./src/main.go
          GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" \
            -o dist/weave-darwin-arm64 ./src/main.go
          GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" \
            -o dist/weave-windows-amd64.exe ./src/main.go

          # Make binaries executable
          chmod +x dist/weave-*

      - name: Create checksums
        run: |
          cd dist
          sha256sum * > checksums.txt

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${{ needs.prepare.outputs.version }}
          echo "## Weave CLI ${VERSION}" > release_notes.md
          echo "" >> release_notes.md

          # Get commit messages since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            echo "### Changes since ${PREV_TAG}" >> release_notes.md
            git log ${PREV_TAG}..HEAD --pretty=format:"- %s" >> release_notes.md
          fi

          cat >> release_notes.md << 'EOF'

          ### Downloads

          - **Linux AMD64**: `weave-linux-amd64`
          - **Linux ARM64**: `weave-linux-arm64`
          - **macOS AMD64**: `weave-darwin-amd64`
          - **macOS ARM64**: `weave-darwin-arm64`
          - **Windows AMD64**: `weave-windows-amd64.exe`

          ### Installation

          Download the appropriate binary for your platform and make it executable:

          ```bash
          # Linux/macOS
          chmod +x weave-linux-amd64
          mv weave-linux-amd64 /usr/local/bin/weave
          weave --help

          # Windows
          weave-windows-amd64.exe --help
          ```

          ### Verification

          Verify the integrity of the downloaded binary:

          ```bash
          sha256sum -c checksums.txt
          ```
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: Release ${{ needs.prepare.outputs.version }}
          body_path: release_notes.md
          files: |
            dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
